{% extends "layouts/layout-dashboard.twig" %} {% set page_group = "neighborhood" %} {# Set page properties (page.*) here. #} {% block page %} {# By putting this in a special block, we ensure that it will be set AFTER the default values are set in the parent template, but BEFORE the page itself is rendered. #} {% set page = page | merge({ "title" : "Create Neighborhood", "description" : "" }) %} {{ parent() }} #} {% endblock %} {% block content %}

<div class="row">
    <div class="col-xs-12">
        <div class="panel panel-primary">
            <div id="settings-alerts" class="create-unit-alert">
            </div>
              
              <div class="container-fluid">
              <form class="form-inline">
               <div class="form-group">
            <h2>Neighborhood</h2>
            </div>
            
            </form>
             </div>
         <div class="panel-body">
            <form class="form-inline">
                <div class="form-group" style=" padding-right:70px;padding-bottom:10px">
                <div class="input-group custom-search-form">
                    <input type="text" class="form-control search" data-column="all" id="units-search-field" placeholder="Search...">
                    <span class="input-group-btn">
                    <button class="btn btn-default unit-search-button" type="button">
                        <i class="fa fa-search "></i>
                    </button>
                    </span>
                </div>
                </div>
                <div class="form-group" style="padding-right:70px;padding-bottom:10px">
                <div class=' users-btn-panel'>
                    <button data-toggle="modal" id="createButton" class="btn btn-success"><i class="fa fa-plus-square"></i> Add New Neighborhood</button>
                </div>
                </div>
                </form>
                 <div class="panel panel-default">
            <div class="panel-body">
             <div class="panel-body no-padding" >
                <table id="neighborhoodTable" class="table table-bordered table-hover table-striped tablesorter-bootstrap dataTables cellspacing=0 " style="width: 100% !important;">
                    <thead>
                        <th >Neighbrhood English</th>
                        <th>Neighbrhood Arabic</th>
                        <th>Actions</th>
                    </thead>
                </table>
                </div>
                </div>
                </div>
            </div>
        </div>
        <!-- end of panel -->
    </div>
    {#
    <div class="col-xs-1 col-md-1 col-md-offset-1"></div> #}
</div>
<div class="modal fade" id="create" role="dialog" aria-labelledby="edit" aria-hidden="true" style="font-family:'Bree Serif'">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
            <h4 class="modal-title custom_align" id="Heading">Create New Neighbrhood</h4>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="col-xs-1"></div>
                <div class="col-xs-10">
                    <form class="form-horizontal" role="form">
                        <div class="form-group">
                            <label for="neighborhood_en"> Neighbrhood English</label>
                            <input class="form-control owner" id="neighborhood_en" name="neighborhood_en" required />
                            
                            <div class="name-alerts" style="color:red"></div>
                        </div>
                        <div class="form-group">
                            <label for="neighborhood_ar">Neighborhood Arabic</label>
                            <input class="form-control neighborhood" list="mynei" id="neighborhood_ar" name="neighborhood_ar" required />

                        </div>


                      
                        
                    </form>
                </div>
                <div class="col-xs-1"></div>
            </div>
        </div>
        <div class="modal-footer ">
            <button type="button" id="Createneighborhood" class="btn btn-primary">Create</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        </div>
    </div>
    <!-- /.modal-dialog -->
</div>
<div class="modal fade" id="edit" tabindex="-1" role="dialog" aria-labelledby="edit" aria-hidden="true">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
            <h4 class="modal-title custom_align" id="Heading"> Edit Neighbrhood</h4>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="col-xs-1"></div>
                <div class="col-xs-10">
                    <form class="form-horizontall" role="form">
                        <div class="form-group">
                            <label for="neighborhood_en">Neighbrhood English</label>
                            <input class="form-control eneighborhood_en" id="neighborhood_en" name="neighborhood_en" />
                            
                        </div>
                        <div class="form-group">
                            <label for="neighborhood_ar">Neighborhood Arabic</label>
                            <input class="form-control eneighborhood_ar" id="neighborhood_ar" type="text"  required>
                            
                            <div class="name-alerts" style="color:red"></div>
                        </div>

                    </form>
                </div>
                <div class="col-xs-1"></div>
            </div>
        </div>
        <div class="modal-footer ">
            <button type="button" id="editneighborhood" class="btn btn-warning">Â Update</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        </div>
        <!-- /.modal-dialog -->
    </div>
</div>
<div class="modal fade" id="delete" tabindex="-1" role="dialog" aria-labelledby="edit" aria-hidden="true">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
            <h4 class="modal-title custom_align" id="Heading">Delete a Neighbrhood</h4>
        </div>
        <div class="modal-body">
            <div class="alert">Are you sure you want to delete this Record?</div>
        </div>
        <div class="modal-footer ">
            <button type="button" class="btn btn-danger" id="deleteneighborhood">Yes</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        </div>
    </div>
</div>
{% endblock %} {% block page_scripts %}
<script>
$(document).ready(function() {
    //used to pre select date in datepicker on update 
    var currentDate;

    csrf_token = $("meta[name=csrf_token]").attr("content");

    // config datatable
    $('#neighborhoodTable').DataTable({
        'ajax': {
            "type": "Get",
            "url": site['uri']['public'] + '/neighborhood/all/',
            "dataSrc": function(json) {
                tableData = json;
                console.log(json);
                return json;

            }
        },
        "paging": false,
        "ordering": true,
        "info": false,
        "searching": false,
        "responsive": true,
        //"pageLength":10,

        columns: [
            { "data": "neighborhood_en" },
            { "data": "neighborhood_ar" },
            { "data": null, "defaultContent": '<div class="btn-group"><button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">Actions<span class="caret"></span></button><ul class="dropdown-menu" role="menu"><li><a href="#"  id="deleteneighborhood" data-title="Delete Neighborhood" data-target="#delete" data-placement="top" data-toggle="tooltip"><i class="fa fa-trash-o"></i> Delete Neighborhood</a></li><li><a href="#" id="editneighborhood" data-title="Edit" data-target="#edit"  data-toggle="tooltip" ><i class="fa fa-edit"></i> Edit Neighborhood</a></li></ul></div>' }
        ],
        fnRowCallback: function(row, data, iDisplayIndex, iDisplayIndexFull) {
            // Set data-id=id on the row
            $(row).data('id', data.id);

        }
    })

    //get users lists for create and edit
    // $.ajax({
    //     "url": site['uri']['public'] + '/createunit/getUsersList/',
    //     type: "get",
    //     dataType: 'json'
    // }).done(function(usersList) {
    //     console.log(usersList);
    //     listData = {};
    //     usersList.forEach(bindUsersList);
    //     console.log(listData);

    // });



});

// Create Unit button
$('#createButton').on('click', function() {
    $('#create').modal("show");
    var target = $('.form-horizontal');
    target.closest('form').find("input[type=text],input[type=number]").val("");

    $('.form-horizontal').find('input').each(function() {
        $(this).css("border-color", "#909090");
    });
    $(".name-alerts-en").html("");
    $(".name-alerts-ar").html("");
    $(".number-alerts-1").html("");
    $(".number-alerts-2").html("")

});



// function bindUsersList(user) {
//     listData[user["display_name"] + ' -' + user["email"]] = user["id"];

//     $('#ownersList').append('<option  value="' + user["display_name"] + ' -' + user["email"] + '">');

// }



//Save Neighborhood 
$('#create').on('click', '#Createneighborhood', function() {

    var modal = $(this).closest('.modal');
    var values = getValuesFromForm('.form-horizontal');
    //var ownerID = listData[values.owner];
    if (modalValidityCheck(values, '.form-horizontal')) {

        //var date = values.dateofres.split("-").reverse().join("-");
        var params = { neighborhood_en: values.neighborhood_en, neighborhood_ar: values.neighborhood_ar,csrf_token: encodeURIComponent(csrf_token) };

        var url = site['uri']['public'] + "/createneighborhood/";
        console.log(url,params);
        var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params,
                beforeSend: function() {
                    $('.loader-modal-lg').modal('show')
                },
            }).done(function(data) {
                $('#create').modal("hide");
                $('.loader-modal-lg').modal('hide')
                $('#neighborhoodTable').DataTable().ajax.reload();
                notifyMe();
               
            })
            .fail(function(err) {
                $('.loader-modal-lg').modal('hide')
                $('#create').modal("hide");
                console.log("err", err);
                notifyMe2();
               
            });
    }

});


function notifyMe() {
    

  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "New Neighborhood Has been Added",
                icon:"{{site.uri.public}}/images/Rawabi_Logo.png"

                             };

          var notification = new Notification("Notification",options);
                      setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "New neighborhood Has been Added",
              icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
        };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);


      }
    });
}
}
function notifyMe2() {
  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "Failed to Add New Neighborhood",
                icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
            

                             };
          var notification = new Notification("Notification",options);
            setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "Failed to Add New Neighborhood",
              icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
        };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);
      }
    });
  }
}


$('#neighborhoodTable').on('click', "#editneighborhood,#deleteneighborhood", function() {


    var row = $(this).closest('tr');
    var rowData = $('#neighborhoodTable').DataTable().row(row).data();
    $('.form-horizontall').find('input').each(function() {
        $(this).css("border-color", "#909090");
    });
    $(".number-alerts-1").html("");
    $(".number-alerts-2").html("");
    $(".name-alerts-en").html("");
    $(".name-alerts-ar").html("");
    // show modal
    $($(this).data('target')).modal('show');
    // set id from row to modal data-id
    $('.modal').data('id', rowData.id)
    // set modal values from row data
    $('.eneighborhood_en').val(rowData.neighborhood_en);
    $('.eneighborhood_ar').val(rowData.neighborhood_ar)
    
    $('#ownersListEdit').html('');


    //store current date
    currentDate = $("#edateofres").parent().find("input").val();


});

$('#edit').on('click', '#editneighborhood', function() {
    var modal = $(this).closest('.modal');


    var id = modal.data('id');

    var values = getValuesFromForm(".form-horizontall")


    if (modalValidityCheck(values, '.form-horizontall')) {
        var params = { id: id, neighborhood_en: values.neighborhood_en, neighborhood_ar: values.neighborhood_ar, csrf_token: encodeURIComponent(csrf_token) };
        var url = site['uri']['public'] + "/neighborhood/edit/";
        console.log(params);

        var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params,
                beforeSend: function() {
                    $('.loader-modal-lg').modal('show')
                },
            }).done(function(data) {
                console.log("uf_neighbrhood" + id);

                $('#edit').modal("hide");
                $('.loader-modal-lg').modal('hide');
                $('#neighborhoodTable').DataTable().ajax.reload();
                notifyMe3();
              
            })
            .fail(function(err) {
                $('.loader-modal-lg').modal('hide');
                notifyMe4();
               
                console.log("err", err)

            });
    }
});
function notifyMe3() {
  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "Unit Has been Edited",
                icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
            

                             };
          var notification = new Notification("Notification",options);
            setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "Unit Has been Edited",
              icon:"{{site.uri.public}}/images/Rawabi_Logo.png"
          };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);
      }
    });
  }
}
function notifyMe4() {
  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "Failed to Edit Unit",
                icon:"{{site.uri.public}}/images/Rawabi_Logo.png"
            

                             };
          var notification = new Notification("Notification",options);
            setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "Failed to Edit Unit",
              icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
          };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);
      }
    });
  }
}

$("#edateofres").parent().on("dp.show", function(e) {
    //set date on date picker open
    var date = currentDate.split("-").reverse().join("-");
    $("#edateofres").parent().data("DateTimePicker").date(date);
});

$('#delete').on('click', '#deleteneighborhood', function() {
    var neighborhood_id = $(this).closest('.modal').data('id');
    var params = { neighborhood_id: neighborhood_id, csrf_token: encodeURIComponent(csrf_token) };
    var url = site['uri']['public'] + "/deleteneighborhood/?";
    var req1 = $.ajax({
            type: "DELETE",
            url: url,
            data: params,
            beforeSend: function() {
                $('.loader-modal-lg').modal('show')
            },
        }).done(function(data) {
            console.log("uf_neighborhood" + neighborhood_id);
            var params2 = {
                neighborhood_id: neighborhood_id,

                csrf_token: encodeURIComponent(csrf_token)
            };
            $('#delete').modal("hide");
            $('.loader-modal-lg').modal('hide')
            $('#neighborhoodTable').DataTable().ajax.reload();
            notifyMe5();
           
        })
        .fail(function(err) {
            $('.loader-modal-lg').modal('hide')
            console.log("err", err);
            notifyMe6();
           
        });
})

function notifyMe5() {
  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "Unit Has been Deleted",
                icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
            

                             };
          var notification = new Notification("Notification",options);
            setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "Unit Has been Deleted",
              icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
          };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);
      }
    });
  }
}
function notifyMe6() {
  if (!("Notification" in window)) {
    alert("This browser does not support desktop notification");
  }
  else if (Notification.permission === "granted") {
        var options = {
                body: "Failed to delete Unit",
                icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
            

                             };
          var notification = new Notification("Notification",options);
            setTimeout(notification.close.bind(notification), 4000);

  }
  else if (Notification.permission !== 'denied') {
    Notification.requestPermission(function (permission) {
      if (!('permission' in Notification)) {
        Notification.permission = permission;
      }
    
      if (permission === "granted") {
        var options = {
              body: "Failed to delete Unit",
              icon: "{{site.uri.public}}/images/Rawabi_Logo.png"
        };
        var notification = new Notification("Notification",options);
                    setTimeout(notification.close.bind(notification), 4000);
      }
    });
  }
}
$('#units-search-field').on('input', function(e) {
    var search = $('#units-search-field').val().toLowerCase();
    $('#neighborhoodTable').each(function() { // Search among possibly multiple tables
        // Hide all table rows
        $(this).find('tbody tr').hide();
        // Search through all td:s and if a match is found => display the tr that the td belongs to
        $(this).find('tbody td').filter(function() {
            return $(this).text().toLowerCase().indexOf(search) != -1; // case insensitive search
        }).parent().show();
        $(this).trigger('applyWidgets'); // for zebra
    });
});

function modalValidityCheck(values, formSelector) {
    var flag = true;
    var target = $(formSelector);
    // checks for empty fields when required flag is true
    target.find('input').filter('[required]').each(function() {

        if (!$(this)[0].checkValidity()) {
            $(this).css("border-color", "red");
            flag = false;
        } else {
            $(this).css("border-color", "#909090");

        }
    })
    return flag
}

function getValuesFromForm(formSelector) {
    // get all the inputs into an array.
    var inputs = $(formSelector + ' :input');
    var values = {};
    inputs.each(function() {
        values[$(this).attr('id')] = $(this).val();
    });
    return values
}





function formatDateToYYYYMMDD(date) {
    if (!date instanceof Date) {
        var dateWithoutTime = date.split(" ")[0];
        date = new Date(dateWithoutTime);
    } else {
        date = new Date(date);
    }
    return moment(date).format("YYYY-MM-DD");
}
</script>
{% endblock %}